Ghostbusters
Original document can be found here.
https://bhrolenok.github.io/teaching/cs-3600-spr2019/project3/index.html
설명
  - Bayesian Network를 사용해 유령들의 위치를 파악한다. 팩맨은 유령들을 다 처리 함으로써 게임이 끝이 난다. 각각의 블록들의 색은 각각의 유령들의 Manhattan distance를 보여준다. 

본인이 edit한 파일
  - bustersAgent.py
  - inference.py

bustersAgent.py
  ExactInference class
  - observe method
    - 팩맨은 belief distribution을 통해 유령의 위치를 파악한다. 팩맨이 움직임에 따라 belief distribution이 업데이트 된다.
    - test
      python autograder.py -q q1
  - elapseTime method
    - 팩맨은 유령의 제한된 움직임을 알고 있다 이를 통해 유령의 위치를 더 정확하게 파악할 수 있다. 예를 들면 유령은 한번에 한칸만 움직일수 있는데 만약 갑자기 한번에 먼곳에서 발견되었다면 그것은 잘못된 정보임이 틀림없다. 
      이 정보는 무시해도 된다. 이를 통해 유령의 위치와 움직임을 예상한다. 이 테스트에서는 유령이 밑으로 움직이는 경향이 있으므로 distribution이 바닥에 집중되있는 것을 볼 수 있을 것이다. 
    - test
      python autograder.py -t test_cases/q2/2-ExactElapse
  - chooseAction method
    - 위에 두 method를 사용해 유령을 추적한다. 또한 simple greedy hunting strategy를 이용해 유령에 가까이 팩맨이 움직인다. 
    - test
      python autograder.py -q q3
      python autograder.py -q q3 --no-graphics
  ParticleFilter class
  - initializeUniformly method
    - particle filter를 initialize 한다. 처음 시작할때나 particle이 아무런 weight를 주지 않을때 resample 하여아함으로 filter를 initialize 한다. 
  - getBeliefDistribution
    - belief distribution을 가지고 온다. 
  - observe
    - 거리를 측정하고 이를 바탕으로 belief distribution을 업데이트 한다. 
  - test (intitializeUniformly, getBeliefDistribution, observe)
    python autograder.py -q q4
  - elaseTime method
    - 위의 elapseTime method와 같지만 particle을 state of probabilty 대신 사용하여 implement 한다. 두번째 테스트를 진행할시 유령들은 밑으로 움직이는 경향이 있으므로 distribution이 
      바닥에 집중되있는것을 볼 수 있을 것이다.
    - test
      python autograder.py -q q5
      python autograder.py -t test_cases/q5/2-ParticleElapse
  JointParticleFilter class
  - 각각의 유령들이 움직임은 전에 테스트들에서는 다른 유령들의 움직임에 상관 없이 움직였으나, 이번 테스트에서는 유령들이 서로의 움직임을 피하도록 움직인다. 따라서 그들의 움직임은 다른 유령들에게 영향을 끼치게 된다.
    이번 테스트는 dynamic Bayes Net을 사용해 모든 유령들의 움직임을 추적한다.
  - initializeParticles
  - getBeliefDistribution
  - observeState
  - elapseTime
  - test
    python autograder.py -q q7
